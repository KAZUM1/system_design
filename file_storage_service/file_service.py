from fastapi import FastAPI, APIRouter, UploadFile, File, HTTPException
from fastapi.responses import FileResponse, JSONResponse
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure
from pydantic import BaseModel
from typing import Dict
from kafka import KafkaProducer
import shutil
import os
import redis
import json

class FileMetadata(BaseModel):
    filename: str
    size: int
    filetype: str

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGO_URI = os.getenv("MONGO_URI", "mongodb://root:example@mongo:27017/file_metadata?authSource=admin")
client = MongoClient(MONGO_URI)
db = client["file_metadata"]
files_collection = db["files"]

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∏
files_collection.create_index("filename")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
REDIS_HOST = os.getenv("REDIS_HOST", "redis")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "redis" –¥–ª—è Docker
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka
KAFKA_BROKER = os.getenv("KAFKA_BROKER", "kafka:9092")
KAFKA_TOPIC = os.getenv("KAFKA_TOPIC", "file_events")
kafka_producer = KafkaProducer(
    bootstrap_servers=[KAFKA_BROKER],
    value_serializer=lambda v: json.dumps(v).encode("utf-8")
)

router = APIRouter()
app = FastAPI()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
files_db: Dict[str, str] = {}
folders_db: Dict[str, str] = {}

UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

### üìÇ –ü–∞–ø–∫–∏ ###
@router.post("/folders")
async def create_folder(folder_name: str):
    folder_path = os.path.join(UPLOAD_DIR, folder_name)
    if os.path.exists(folder_path):
        raise HTTPException(status_code=400, detail="–ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    os.makedirs(folder_path)
    folders_db[folder_name] = folder_path
    return {"message": "–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞", "folder": folder_name}

@router.get("/folders")
async def list_folders():
    return {"folders": list(folders_db.keys())}

@router.delete("/folders/{folder_name}")
async def delete_folder(folder_name: str):
    folder_path = folders_db.get(folder_name)
    if not folder_path or not os.path.exists(folder_path):
        raise HTTPException(status_code=404, detail="–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    shutil.rmtree(folder_path)
    del folders_db[folder_name]
    return {"message": "–ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞"}

### üìÅ –§–∞–π–ª—ã ###
@router.post("/files/{folder_name}")
async def upload_file(folder_name: str, file: UploadFile = File(...)):
    folder_path = os.path.join(UPLOAD_DIR, folder_name)
    os.makedirs(folder_path, exist_ok=True)
    file_location = os.path.join(folder_path, file.filename)
    with open(file_location, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ Kafka
# –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Kafka (–∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞)
    file_event = {
        "filename": file.filename,
        "path": file_location,
        "folder": folder_name
    }
    kafka_producer.send(KAFKA_TOPIC, file_event)
    kafka_producer.flush()
    print(f"[Kafka Producer] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {file_event}")
    
    # –ó–¥–µ—Å—å –º—ã –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ MongoDB –∏ Redis,
    # —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∑–∞–ø–∏—Å—å –±–µ—Ä–µ—Ç –Ω–∞ —Å–µ–±—è –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å (Consumer)
    return {"message": "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka", "filename": file.filename}

@router.get("/files/{file_id}")
async def get_file(file_id: str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ Redis
    cached_path = redis_client.get(file_id)
    if cached_path:
        return {"filename": file_id, "path": cached_path, "source": "cache"}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ MongoDB
    file_metadata = files_collection.find_one({"filename": file_id})
    if not file_metadata:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ –≤ Redis
    redis_client.setex(file_id, 3600, file_metadata["path"])
    
    return {"filename": file_id, "path": file_metadata["path"], "source": "db"}

@router.delete("/files/{file_id}")
async def delete_file(file_id: str):
    file_metadata = files_collection.find_one({"filename": file_id})
    
    if not file_metadata:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    os.remove(file_metadata["path"])
    files_collection.delete_one({"filename": file_id})

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –∫–µ—à–∞ Redis
    redis_client.delete(file_id)

    return {"message": "–§–∞–π–ª —É–¥–∞–ª–µ–Ω"}

### üß™ –¢–µ—Å—Ç –∫–µ—à–∞ Redis ###
@app.get("/cache_test")
def cache_example():
    redis_client.set("cache_test", "FastAPI + Redis")
    return {"cached_value": redis_client.get("cache_test")}

### üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ###
@app.post("/files/files/{folder}")
async def upload_file(folder: str, file: UploadFile = File(...)):
    return {"filename": file.filename, "folder": folder}

### üîé –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π) ###
@app.get("/files/files/{file_id}")
async def get_file_from_storage(file_id: str):
    file_metadata = files_collection.find_one({"filename": file_id})
    if file_metadata and os.path.exists(file_metadata["path"]):
        return FileResponse(file_metadata["path"], media_type="application/octet-stream", filename=file_id)
    return JSONResponse(status_code=404, content={"message": "File not found"})

app.include_router(router)
